<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[j{ackie} zetta {cohen}.net]]></title>
  <link href="http://aerenchyma.github.io/atom.xml" rel="self"/>
  <link href="http://aerenchyma.github.io/"/>
  <updated>2015-04-26T21:08:21-04:00</updated>
  <id>http://aerenchyma.github.io/</id>
  <author>
    <name><![CDATA[Jackie Cohen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Globes and maps]]></title>
    <link href="http://aerenchyma.github.io/blog/2013/07/25/globes-and-maps/"/>
    <updated>2013-07-25T17:07:00-04:00</updated>
    <id>http://aerenchyma.github.io/blog/2013/07/25/globes-and-maps</id>
    <content type="html"><![CDATA[<p><a href="http://bit.ly/18Akcfu">Writes Bonnie Bogle of MapBox</a>,  &#8220;The diversity of our team has made our team stronger, our tools better, and our approaches smarter and more innovative.&#8221;</p>

<p>The aim I see here is really great. This is what I&#8217;d like to see more of.</p>

<p>When industries, platforms, and organizations I care about acknowledge not just that they care about diversity, but that they can explain why they care and what they want to do, that they&#8217;re serious for real reasons, I am pretty likely to talk about them positively, and excitedly, and often, to want to and try to use their products or services. I don&#8217;t think I&#8217;m alone there.</p>

<p>I&#8217;m glad to see this for many reasons, obviously. But maps affect nearly everyone in some way or another. Maps have effects on everyone and how people deal with others. How they travel. What they think of places they frequent and places they&#8217;ve never been. I don&#8217;t know this for sure, but I know it for me, and I see evidence of it everywhere. Maps help people form opinions on and gain knowledge about the public transit systems available (and unavailable!) to them. From maps arise issues of accessibility on multiple axes, a lot of frustration, metric tons of joy. (I love maps.) They help and hurt, but mostly, and certainly ideally, I believe they can and should and do help, and I think the world is moving closer, closer, to wholly positive maps all the time.</p>

<p>There&#8217;s always a long way to go but maps help me figure that out.</p>

<p>So for now, yeah: this made me happy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Here at the edge]]></title>
    <link href="http://aerenchyma.github.io/blog/2013/05/25/here-at-the-edge/"/>
    <updated>2013-05-25T21:13:00-04:00</updated>
    <id>http://aerenchyma.github.io/blog/2013/05/25/here-at-the-edge</id>
    <content type="html"><![CDATA[<p><a href="http://www.powells.com/biblio/9780872863323"><em>Close to the Machine</em></a> was published in 1997, which was also the year I first (technically) got access to the Internet and eleven years before I seriously thought about programming myself.</p>

<p>I came across the memoir in 2013, after Ellen Ullman&#8217;s op-ed <a href="http://nyti.ms/10UrtAc">How to Be a &#8216;Woman Programmer&#8217;</a> was published in the New York Times on May 18.</p>

<!-- more -->


<p>The second line of that op-ed reads <em>I wrote code that ran at the levels between flashy human interfaces and the deep cores of operating systems, like the role of altos in a chorus, who provide the structure without your taking much notice of their melodic lines</em>, and I was instantly fascinated. I am interested in all the things she mentions in that sentence, but altos-in-a-chorus-y scripts I recognize as the kind of programming that, so far at least, brings me the most joy. (It&#8217;s a tough choice.)</p>

<p>This is for reasons Ullman talks about. Describing sitting at a table with clients for a &#8220;city-wide database for AIDS service providers,&#8221; she writes about the disconnect between she herself, a senior programmer tasked with building this system, and the other people around the table: runners of clinics, doctors, dentists, hospice directors. <em>I was there at the edge,</em> she writes, <em>the interface of the system, in all its existence, to the people, in all their existence.</em><sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup></p>

<p>Right now, that&#8217;s the most thrilling thing for me about <em>being a programmer</em>, and also the most frustrating. There is so much knowledge I learnt over years that I wish I could convey in a matter of minutes. But my ability to make something that I <em>know</em> makes someone&#8217;s life easier, watch them use it, and make it better for their use, never gets old.</p>

<p>Still: I don&#8217;t know others&#8217; jobs better than they do. Maybe <em>I</em> think a command-line script will solve a lot of problems but it won&#8217;t help if the users-to-be are confused by &#8220;the command line.&#8221; And maybe I&#8217;m <em>wrong.</em> <a href="https://medium.com/close-to-the-machine/8c2d491886fa">Diana Kimball wrote about arrogance and obsession</a>, and how arrogance can be a tool. This resonates with me. (Sometimes, I&#8217;m right.) But the same kind of obsession that makes me happy also scares me. I&#8217;ve walked away from conversations about problem-solving feeling like an ass. <em>I talked, asked questions, but I saw I was operating at a different speed from the people at the table,</em> Ullman writes.<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup> That&#8217;s familiar. Sometimes I&#8217;m focusing on a detail that is important for the <em>database</em> but not the users. Sometimes I&#8217;m rushing ahead &#8211; this platform, that language, yes yes yes&#8230; What?</p>

<p>Many of these tools to switch on are incredibly useful in programming but the opposite when explaining, and so walking the line between the technical and the non-technical (these are terms I hesitate to use) &#8211; say, teaching programming, or working on tech systems for a multi-disciplinary organization &#8211; means careful attention is important. What are my assumptions (today)?</p>

<p>Ellen Ullman gives voice to a lot of the things that scare me, and a lot of the things that I find incredibly exciting. <em>In &#8230; software engineering, there is something almost shameful in this helpful, social-services system we&#8217;re building. The whole project smacks of &#8230; people who just want to use the stuff we write and don&#8217;t care how we did it.</em><sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup> I think that I understand what this says, but I don&#8217;t feel good about understanding it. Yet also, I love that I kind of get it. <em>We had started with some scratchings on a white-board and built this: this operational program, this functional thing.</em><sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup> That realization, that&#8217;s <em>amazing.</em> Every time.</p>

<p>I finished <em>Close to the Machine</em> a couple days ago &#8211; a quick read, and one I enjoyed &#8211; and I&#8217;m still thinking about it because of precisely this problem. Computer Science often revolves around complexity, but complexity is definitely not unique to it. I talk to my friend, a manager at a non-profit organization, about how a script could speed up tasks. Together, we write something that brings one process from months to days long, but just because programming can speed things up does not mean there isn&#8217;t always more.</p>

<p>Programming is an <em>awesome</em> tool and also an awesome, awesome practice. But while I believe there is an huge amount of value in all stripes of Computer Science and programming as disciplines &#8211; and do I ever, especially when it&#8217;s approached the way <a href="http://bit.ly/ZlCrEw">it is at Hacker School</a> &#8211; I also think programming&#8217;s value depends a great deal on domain expertise. Its use as an awesome tool depends often on the experiences of hospice directors and doctors and runners of clinics. The knowledge of economists, and leaders of campaigns against hunger, and linguists doing fieldwork. Its value is, in my opinion, multiplied exponentially by experience &#8211; not just experience programming, but experience of how an medical clinic worker goes about their day, for instance.</p>

<p>The value of programming depends on willingness to listen. Listening to other programmers is important, but also keeping one foot out of <em>the universe where two human beings can simultaneously understand the statement &#8216;if space is numeric!&#8217;</em> matters, sometimes.<sup id='fnref:5'><a href='#fn:5' rel='footnote'>5</a></sup> And yet often the best work is done when absorbed in that universe. These facts coexist, and Ullman&#8217;s work is one of the first (non-tweet) things I&#8217;ve read that acknowledges this.<sup id='fnref:6'><a href='#fn:6' rel='footnote'>6</a></sup></p>

<p>I liked spending hours in a beige classroom scribbling logic on a chalkboard with other people &#8211; as Ullman puts it, <em>other weird logic-dreamers like myself.</em> It&#8217;s something I love about programming, and something I loved about <a href="http://www.hackerschool.com/about">Hacker School</a>: there&#8217;s always more. There&#8217;s certainly happiness in belonging to a group of people who love something, but there&#8217;s a danger in homogenizing that love in your head. Because it makes it very easy, then, to keep people <em>out</em> instead of bringing people in. There are infinite kinds of experience, and equally many ways to love something.</p>

<p>If everyone were &#8220;a programmer&#8221; first, little to nothing would ever get done outside that numeric space universe.</p>

<p>But if more people were &#8220;a programmer&#8221; by varied definitions, or offered the opportunity to be if they want &#8211; the opportunity to truthfully say &#8216;I&#8217;ve read a line or more of code&#8217;? &#8216;I&#8217;ve written a short program&#8217;? &#8216;I understand possibilities this tool could offer me&#8217;? &#8216;I am committed to making sure a new system works for the people who will need to <em>use</em> it&#8217;? &#8216;I will talk to people in technological domains about the complexity <em>I</em> am faced with and hope we can reach common ground&#8217;, or something else &#8211; then, I think more <em>would</em>. I&#8217;ve seen firsthand that it&#8217;s useful and interesting to hear about types of complexity I&#8217;m unfamiliar with. It isn&#8217;t because I am a programmer. And this: <em>We build the system, we live in its midst, and we are changed.</em><sup id='fnref:7'><a href='#fn:7' rel='footnote'>7</a></sup> That&#8217;s certainly not unique to programmers, but I think it&#8217;s <em>common</em> to them.</p>

<p>That&#8217;s pretty cool.</p>

<hr />

<div class="footnotes">
    <ol>
        <li id='fn:1'><p> Ullman, Ellen. <u>Close to the Machine</u>. Picador: USA. 1997; 2012 reprint. p 12.
<a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p> <em>Ibid.</em>
<a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p> <em>Ibid,</em> p 9.
<a href='#fnref:3' rev='footnote'>↩</a></p>
</li><li id='fn:4'><p> <em>Ibid,</em> p 173.
<a href='#fnref:4' rev='footnote'>↩</a></p>
</li><li id='fn:5'><p> <em>Ibid,</em> p 2.
<a href='#fnref:5' rev='footnote'>↩</a></p>
</li><li id='fn:6'><p> I&#8217;m sure there are others/similar and welcome recommendations
<a href='#fnref:6' rev='footnote'>↩</a></p>
</li><li id='fn:7'><p> <em>Ibid,</em> p 30.
<a href='#fnref:7' rev='footnote'>↩</a></p>
</li>
    </ol>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things worthwhile]]></title>
    <link href="http://aerenchyma.github.io/blog/2013/04/29/things-worthwhile/"/>
    <updated>2013-04-29T23:55:00-04:00</updated>
    <id>http://aerenchyma.github.io/blog/2013/04/29/things-worthwhile</id>
    <content type="html"><![CDATA[<p>In between projects, or at least time for documentation of them here (my very own Raspberry Pi arrived the other day! But I must acquire other hardware to do the project(s) I want first. I&#8217;ve been shoving new front-end-dev-y information into my head rapidly for a work project over the past week or so!) &#8211;</p>

<p><a href="http://geekfeminism.org/author/brainwane/">Sumana Harihareswara</a> posted <a href="http://geekfeminism.org/?p=7554">this</a>, &#8220;From &#8216;Sit Still&#8217; to &#8216;Scratch your own itch&#8217;&#8221; on <a href="http://geekfeminism.org">GeekFeminism.org</a> recently, and I wish to share it all over because I think it&#8217;s wonderful.</p>

<p>I commented, but I&#8217;m echoing a slightly edited version of that comment here, with context included.</p>

<!-- more -->


<p>She lists some ideas and things to remember about &#8220;alternative pathways&#8221; to learning, and to getting into open stuff. There&#8217;s an unspoken (and sometimes spoken) belief in large swathes of the open source world &#8211; well-meaning, almost always! &#8211; that not only is a good way of getting into programming (or really learning anything, especially anything that involves <em>making</em> ) to &#8220;scratch your own itch,&#8221; but that this is the ideal way, the real way, the way that makes you legit, whatever that means.</p>

<p>Well, no.</p>

<p>I think this is a massively useful reminder. It&#8217;s something I struggle with: &#8216;but I want to make something <em>new.</em>&#8217; I know what it&#8217;s like to get slowed down by trying to make something more generalizable.</p>

<p>I also think there are increasingly large sections of the internet and the world replete with great resources for new programmers or people who want to learn to program, or learn about programming, or learn about building stuff with circuits, or learn about automating putting a butterfly on every piece of clothing they own (a real, and seriously cool example, but that&#8217;s another story). But there&#8217;s a piece brought up in her piece I&#8217;ve linked that is often forgotten: all the practicing has value, and making something is <em>cool.</em></p>

<p>Sumana writes, <em>It is fine to simply piggyback on existing projects and drift around a bit learning lots of little things that way</em> &#8211; more people should hear this. She writes, <em>Embrace boringness</em>  and explains that <em>If an idea appeals to you but there’s an inner censor saying “that’s too boring” or “what’s the use,” you can tell that inner voice that Sumana says “shut up.”</em></p>

<p>I deeply appreciate this, especially in the context of the popular Django tutorials, to be honest. I get frustrated making things I know have been made before if I don&#8217;t have an idea to improve it, to make it mine. I tell other people, but seem to have a hypocritically difficult time learning myself, that sometimes doing one version without variation is a valuable way to learn and make an altered version better, let alone make me a better programmer. Yes, there are lots of blogging systems out there, and if you make a blog where you can post things, or edit things, or delete things or none or some of the above, even if you don&#8217;t want to use it, it is an <em>unqualified awesome</em> that you made it. It&#8217;s valuable time spent if you wanted to learn stuff, to make something, and it can make you better at more than just building a blog later if you want it to but these aren&#8217;t the reasons to do it for me. <em>You made that</em> and learned stuff and it was neat, that&#8217;s enough.</p>

<p>That&#8217;s not a condescending head-pat sort of comment. When I say &#8220;that&#8217;s COOL&#8221; I mean it, and not believing it for myself (indeed not believing it for anyone) is ridiculous. Time on the ground is valuable &#8211; probably the most valuable thing if <em>being a great programmer</em> is a goal, and <em>this</em> is generalizable.</p>

<p>(I learn things from <a href="http://hackerschool.com">Hacker School</a> even nearly a year after I flew to New York for it.)</p>

<p>Anyway, I recommend it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[remote lighting]]></title>
    <link href="http://aerenchyma.github.io/blog/2013/04/21/remote-lighting/"/>
    <updated>2013-04-21T12:01:00-04:00</updated>
    <id>http://aerenchyma.github.io/blog/2013/04/21/remote-lighting</id>
    <content type="html"><![CDATA[<p>This past Friday, I joined forces with a friend for a fun remote lighting project using a Raspberry Pi.</p>

<p>Remote lighting? you say. You know the colored stage lights you see in theatres? If you ever did tech for a production in high school in a small theatre without super-intense equipment, those are the ones we used. They were hooked up via <a href="http://en.wikipedia.org/wiki/DMX_(lighting">DMX</a> ). (See <a href="http://www.opendmx.net/index.php/OLA_Python_API">here</a> for more information about the Python API, which we used.)</p>

<p>Some of these lights were hooked up to a Pi, and the idea was that we would be able to pass a color (e.g. on a color wheel like you might see in Photoshop), and brightness, via a web interface, which would then set the lights on as specified.</p>

<p>Below is the how and the what, and the code. All you need to make this happen is the appropriate lights and wiring (I didn&#8217;t do this part, so I can&#8217;t speak to it), a Raspberry Pi, set up with wireless, and a computer with monitor and keyboard input/a laptop that can also access the wireless network.</p>

<!--more-->


<h2>the setup</h2>

<p>We had 4 &#8220;normal&#8221; lights, and 1 special case light. Each of the four normal lights had four input/output channels. The fifth &#8220;special case&#8221; light had five channels.</p>

<p>All of them had channels <code>brightness</code>, <code>red</code>, <code>blue</code>, and <code>green</code>. The special case light (a light sort of but not exactly like <a href="http://www.alibaba.com/product-gs/693385417/DMX_18x10W_RGBW_4IN1_Multi_color.html">this</a>) had these four channels, plus a <code>rotation</code> channel.</p>

<p>Each of these channels accepted an integer from 0 - 255 (8-bit encoding).</p>

<p>In the case of each of the colors (red, blue, green), the integers <a href="http://en.wikipedia.org/wiki/RGB_color_model#Additive_primary_colors">represented the color amounts</a> &#8211; for example, <code>red, green, blue = 0, 0, 255</code> would make a light shine pure blue light. <code>red, green, blue = 100, 0, 155</code> would probably result in some shade of purple light.</p>

<p>For the brightness parameter, the 0 - 255 scale was pretty intuitive: 0 meant off, 255 was the brightest the light would go.</p>

<p>And for the special case, the 0 - 255 scale represented the speed of rotation, from off to the fastest it would rotate, about once per second or so (this light also has a flashing option as well as rotation of the beams, but we decided not to include that as an option because the flashing, like strobe lighting, is annoying if not dangerous-for-some).</p>

<p>All five of these lights were hooked up to the Pi and all the appropriate information sent to them, via the Pi. (Of course, being allowed to turn on the rotate option does not make sense if the special case is turned off, but we decided to overlook that for two reasons: (a) the users were only those of us making it, and especially (b) turning rotate on and the special case off was senseless, but would not break anything.)</p>

<h2>the how</h2>

<p>We needed to create the server:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">SocketServer</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyTCPHandler</span><span class="p">(</span><span class="n">SocketServer</span><span class="o">.</span><span class="n">StreamRequestHandler</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># self.rfile is a file-like object created by the handler</span>
</span><span class='line'>        <span class="c"># we can now use e.g. readline() instead of raw recv() calls</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">rfile</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>        <span class="k">print</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span> <span class="c"># see what&#39;s going on</span>
</span><span class='line'>        <span class="n">list_vals</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;,&quot;</span><span class="p">)]</span>
</span><span class='line'>        <span class="n">lights_start</span><span class="p">(</span><span class="o">*</span><span class="n">list_vals</span><span class="p">)</span>
</span><span class='line'>        <span class="c"># Likewise, self.wfile is a file-like object used to write back to the client</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">wfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;YES&quot;</span><span class="p">)</span> <span class="c"># acknowledge something&#39;s happening</span>
</span></code></pre></td></tr></table></div></figure>


<p>The function in line 10 there, and the functionality from lines 7-9, I&#8217;ll address shortly.</p>

<p>And at the bottom of the script,</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span> <span class="o">=</span> <span class="s">&quot;0.0.0.0&quot;</span><span class="p">,</span> <span class="mi">9999</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Create the server, binding to localhost on port 9999</span>
</span><span class='line'><span class="n">server</span> <span class="o">=</span> <span class="n">SocketServer</span><span class="o">.</span><span class="n">TCPServer</span><span class="p">((</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">),</span> <span class="n">MyTCPHandler</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">server</span><span class="o">.</span><span class="n">serve_forever</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also needed to use the <a href="http://www.opendmx.net/index.php/OLA_Python_API">OLA Python API</a> to deal with DMX, which was a simple matter of inspecting and copying over code.</p>

<p>At the top of the file,</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">array</span> <span class="c"># data must be transmitted to DMX in an array</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">ola.ClientWrapper</span> <span class="kn">import</span> <span class="n">ClientWrapper</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then, to instantiate a ClientWrapper for OLA and defining a function to deal with it:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">wrapper</span> <span class="o">=</span> <span class="n">ClientWrapper</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">DmxSent</span><span class="p">(</span><span class="n">state</span><span class="p">):</span>
</span><span class='line'>  <span class="n">wrapper</span><span class="o">.</span><span class="n">Stop</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, a function to turn on the lights. We assumed we would always want the same color coming from each of the four (or five) lights.</p>

<p>Per the DMX specifications, the data structure we needed to pass was an array (a real array, not a Python list) with values in order for each lights. So the first four integer values in the array corresponded to the values for one normal light: <em>brightness, red, green, blue</em> values. The second would be the same four values, for the second normal light, etc. The special case light came last, in the order <em>brightness, red, green, blue, rotation</em>.</p>

<p>But just appending one after another was easy to lose track of and not pretty. Hence the function:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">lights_do</span><span class="p">(</span><span class="n">bright</span><span class="p">,</span> <span class="n">red</span><span class="p">,</span> <span class="n">green</span><span class="p">,</span> <span class="n">blue</span><span class="p">,</span> <span class="n">rotate</span><span class="p">,</span> <span class="n">sp</span><span class="p">):</span> <span class="c"># the sp parameter is 0 or 1 and indicates whether the special case light goes on or not</span>
</span><span class='line'>  <span class="n">universe</span> <span class="o">=</span> <span class="mi">1</span> <span class="c"># this is required by DMX -- the lights are essentially attributes of &#39;universe 1&#39;</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="s">&#39;B&#39;</span><span class="p">)</span> <span class="c"># also required; see the OLA Python API specs</span>
</span><span class='line'>  <span class="n">light_data</span> <span class="o">=</span> <span class="p">[</span><span class="n">bright</span><span class="p">,</span> <span class="n">red</span><span class="p">,</span> <span class="n">green</span><span class="p">,</span> <span class="n">blue</span><span class="p">,</span> <span class="n">rotate</span><span class="p">]</span>
</span><span class='line'>  <span class="n">normal_light</span> <span class="o">=</span> <span class="n">light_data</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="c"># for extra clarity</span>
</span><span class='line'>  <span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">data</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">normal_light</span><span class="o">*</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">sp</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>      <span class="n">tmp</span> <span class="o">=</span> <span class="p">[</span><span class="n">data</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">light_data</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">client</span> <span class="o">=</span> <span class="n">wrapper</span><span class="o">.</span><span class="n">Client</span><span class="p">()</span> <span class="c"># wrapper, above, is global in this script</span>
</span><span class='line'>  <span class="n">client</span><span class="o">.</span><span class="n">SendDmx</span><span class="p">(</span><span class="n">universe</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">DmxSent</span><span class="p">)</span>
</span><span class='line'>  <span class="n">wrapper</span><span class="o">.</span><span class="n">Run</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The use of previously assigned global variables is a little cringe-worthy, but it achieved our purpose, and while I&#8217;ll make arguments for good practices all the time, the goal of this project was nifty colored lights, to be perfectly honest. Now that we know it works, we&#8217;ll do some brief polishing (both on the script and the wiring ends, but especially on the interface &#8211; these are in progress).</p>

<p><code>tmp</code> here is obviously a throwaway variable. But the list comprehensions in lines 7 and 9 in that snippet earned me a &#8220;that syntax is <em>slick</em>, I admit&#8221; from my not-so-much-a-Python-programmer friend. List comprehensions, they are excellent.</p>

<p>It&#8217;s extremely explicit code in many ways, allowing for Pythonic syntax like the list comprehensions, but I think there&#8217;s value in that kind of explicitness.</p>

<p>Finally, we needed a wrapper function to handle whether or not the special case was on, so everything would go off or on as appropriate before passing new values to the lights to turn them on/change properties of the input channels (e.g. color, brightness).</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">lights_start</span><span class="p">(</span><span class="n">bright</span><span class="p">,</span><span class="n">red</span><span class="p">,</span><span class="n">green</span><span class="p">,</span><span class="n">blue</span><span class="p">,</span><span class="n">rotate</span><span class="p">,</span><span class="n">sp</span><span class="p">):</span>
</span><span class='line'>    <span class="n">lights_do</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">lights_do</span><span class="p">(</span><span class="n">bright</span><span class="p">,</span><span class="n">red</span><span class="p">,</span><span class="n">green</span><span class="p">,</span><span class="n">blue</span><span class="p">,</span><span class="n">rotate</span><span class="p">,</span><span class="n">sp</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, let&#8217;s go back to the <code>handle()</code> method of the <code>MyTCPHandler</code> class:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>  <span class="c"># self.rfile is a file-like object created by the handler</span>
</span><span class='line'>  <span class="c"># we can now use e.g. readline() instead of raw recv() calls</span>
</span><span class='line'>  <span class="bp">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">rfile</span><span class="o">.</span><span class="n">readline</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
</span><span class='line'>  <span class="k">print</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span> <span class="c"># see what&#39;s going on</span>
</span><span class='line'>  <span class="n">list_vals</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;,&quot;</span><span class="p">)]</span>
</span><span class='line'>  <span class="n">lights_start</span><span class="p">(</span><span class="o">*</span><span class="n">list_vals</span><span class="p">)</span>
</span><span class='line'>  <span class="c"># Likewise, self.wfile is a file-like object used to write back to the client</span>
</span><span class='line'>  <span class="bp">self</span><span class="o">.</span><span class="n">wfile</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;YES&quot;</span><span class="p">)</span> <span class="c"># acknowledge something&#39;s happening</span>
</span></code></pre></td></tr></table></div></figure>


<p>When this script is served on the Raspberry Pi, wired to the lights in question, it can accept input from a client.</p>

<p>So this <code>handle()</code> method gets data: <code>self.data</code> .</p>

<p>We expect this to be a comma-separated string of six integer values: <code>bright, red, green, blue, rotate, sp</code> , as seen in <code>lights_start()</code> and <code>lights_do()</code> (above).</p>

<p>In line 4 in the snippet just above, <code>self.data = self.rfile.readline().strip()</code>, we take the arguments from the client and make them into a string stripped of whitespace on either end.</p>

<p>In line 6, <code>list_vals = [int(x) for x in self.data.split(",")]</code>, we split the string at the commas, into a list, making a list e.g. <code>['255','0','255','0','0','1']</code>. But each element of this list is of type <code>String</code>, so we use list comprehension syntax to make <code>list_vals</code> a list of integers (DMX expects integer values).</p>

<p>And in line 7, we call the function <code>lights_start()</code>, the wrapper function seen further above, which prepares to call <code>lights_do()</code> with any appropriate new values. We call it with the values passed to the server from the client: <code>*list_vals</code> is Python syntax to &#8220;unpack&#8221; an iterable like a list.</p>

<h2>the interface</h2>

<p>Wanting to make a quick web interface for sending the colors to the Pi server, we looked for a color picker wheel in JavaScript. Soon, the internet informed us that <code>color</code> is a built-in input value in HTML5.</p>

<p>&#8220;SWEET,&#8221; I said. So, a hasty HTML form (we weren&#8217;t playing designers here):</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;title&gt;</span>Pick a color<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>  <span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;light.php&quot;</span> <span class="na">method=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      Choose Color:<span class="nt">&lt;br&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;color&quot;</span> <span class="na">name=</span><span class="s">&quot;color&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;br&gt;</span>
</span><span class='line'>      Brightness:
</span><span class='line'>      <span class="nt">&lt;br&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;bright&quot;</span> <span class="na">value=</span><span class="s">&quot;255&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;br&gt;</span>
</span><span class='line'>      <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;submit&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/form&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the browser, this looks like:</p>

<p><img src="http://jaclynzetta.files.wordpress.com/2013/04/colorform_remotelighting.png"></p>

<p>We chose 255 as a default brightness, because that seemed overall most likely, and 0 &#8211; black, or off, as a &#8216;default&#8217; for all the color inputs.</p>

<p>(The special case options are not yet dealt with well in the interface, but that&#8217;s easy enough to add, as would be a dropdown menu or slider for the brightness value, which here is just a text entry.)</p>

<p>That would get us a hex color value. We would need to convert that value to RGB. (The 0-255 integer values determining the colors &#8211; of course, the input values for <code>red, green, blue</code> must always add up to 255 in total.) We decided to use PHP (mainly because my expertise, with regards to languages we used, was in Python, and my friend&#8217;s, in PHP):</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">function</span> <span class="nf">hex2rgb</span><span class="p">(</span><span class="nv">$hex</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="nv">$hex</span> <span class="o">=</span> <span class="nb">str_replace</span><span class="p">(</span><span class="s2">&quot;#&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="nv">$hex</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">if</span><span class="p">(</span><span class="nb">strlen</span><span class="p">(</span><span class="nv">$hex</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$r</span> <span class="o">=</span> <span class="nx">hexdec</span><span class="p">(</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$hex</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$hex</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>      <span class="nv">$g</span> <span class="o">=</span> <span class="nx">hexdec</span><span class="p">(</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$hex</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$hex</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>      <span class="nv">$b</span> <span class="o">=</span> <span class="nx">hexdec</span><span class="p">(</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$hex</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$hex</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span>
</span><span class='line'>   <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$r</span> <span class="o">=</span> <span class="nx">hexdec</span><span class="p">(</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$hex</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>      <span class="nv">$g</span> <span class="o">=</span> <span class="nx">hexdec</span><span class="p">(</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$hex</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>      <span class="nv">$b</span> <span class="o">=</span> <span class="nx">hexdec</span><span class="p">(</span><span class="nx">substr</span><span class="p">(</span><span class="nv">$hex</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="nv">$rgb</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="nv">$r</span><span class="p">,</span> <span class="nv">$g</span><span class="p">,</span> <span class="nv">$b</span><span class="p">);</span>
</span><span class='line'>   <span class="c1">//return implode(&quot;,&quot;, $rgb); // returns the rgb values separated by commas</span>
</span><span class='line'>   <span class="k">return</span> <span class="nv">$rgb</span><span class="p">;</span> <span class="c1">// returns an array with the rgb values</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So if a color was chosen on the interface, then we wanted to POST that RGB information, and whatever brightness was selected, to the server:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;color&#39;</span><span class="p">])</span> <span class="p">{</span> <span class="c1">// if-statement begins</span>
</span><span class='line'>  <span class="nv">$color</span> <span class="o">=</span> <span class="nx">hex2rgb</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;color&#39;</span><span class="p">]);</span>
</span><span class='line'>  <span class="nv">$bright</span> <span class="o">=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;bright&#39;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>and, still in this if-statement, turn the returned array from <code>hex2rgb()</code> to a string separated by commas. The quick-n-dirty way:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'>  <span class="nv">$out</span> <span class="o">=</span> <span class="nv">$bright</span> <span class="o">.</span> <span class="s1">&#39;,&#39;</span> <span class="o">.</span> <span class="nv">$color</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">.</span> <span class="s1">&#39;,&#39;</span> <span class="o">.</span> <span class="nv">$color</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">.</span> <span class="s1">&#39;,&#39;</span> <span class="o">.</span> <span class="nv">$color</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">.</span> <span class="s1">&#39;,255,0&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we create a file pointer to the open socket, and pass it the IP address of the Raspberry Pi and the appropriate port (which in our case, as you can see earlier in the post, was port 9999):</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'>  <span class="nv">$fp</span> <span class="o">=</span> <span class="nb">fsockopen</span><span class="p">(</span><span class="s1">&#39;xxx.xxx.xx.xx&#39;</span><span class="p">,</span><span class="s1">&#39;9999&#39;</span><span class="p">);</span> <span class="c1">// x-es represent the pi IP</span>
</span></code></pre></td></tr></table></div></figure>


<p>And write it to the server:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'>  <span class="nb">fwrite</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span> <span class="nv">$out</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="c1">// if-statement ends here</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hooray! I don&#8217;t have pictures, but it was pretty great.</p>

<p>We had a lot of fun with this project, and I think it&#8217;s only made better by the facts that (a) we said &#8216;hey, let&#8217;s do this&#8217; and went and made it happen, and (b) this kind of reasonably simple affecting one&#8217;s physical environment in fun ways using capabilities of a <a href="http://www.raspberrypi.org/faqs">Raspberry Pi</a> is, like the workshop with LEDs and photo sensors I briefly referred to the other day, a great way to show kids the possibilities that are available by learning a little bit about electronics and programming. Which are also GREAT, oh man.</p>

<p>Here&#8217;s where the value I mentioned in explicit code comes in: it&#8217;s great that it&#8217;s easy to read what&#8217;s happening without shoving too much information into one line, but it&#8217;s even better that this makes it easy to explain, and thus easier to teach.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[the # sign]]></title>
    <link href="http://aerenchyma.github.io/blog/2013/04/17/the-number-sign/"/>
    <updated>2013-04-17T22:40:00-04:00</updated>
    <id>http://aerenchyma.github.io/blog/2013/04/17/the-number-sign</id>
    <content type="html"><![CDATA[<p>Today, I went back to my old high school to help a friend teach middle schoolers an introductory workshop on Python and Raspberry Pi. It was thoroughly awesome, but amidst the awesome &#8211; which I&#8217;m not going to talk about in detail yet &#8211; I noticed something interesting:</p>

<p>Discussing comments in Python, someone in the room who graduated college several years before I did called &#8216;#&#8217;, without hesitation, <em>the pound sign.</em></p>

<p>I debated (I was the one who introduced the comment syntax first), and settled on <em>hashtag</em> because I was honestly not sure if the kids would know what &#8220;pound&#8221; meant in this scenario. It is &#8220;pound&#8221; to me, but I <em>thought</em> to hesitate &#8211; it wasn&#8217;t a realization that came from looks of confusion. <em>Hashtag</em> seemed like the most accessible to 12-year-olds (n.b. in a very privileged place).</p>

<p>I got teased about this. By my friend and fellow teacher, not by the kids. He asks, &#8220;When we say &#8216;hashtag&#8217;, is that how you&#8217;d refer to this symbol?&#8221; They nodded yes. He laughed, and I did too; he, and I, and these kids, aren&#8217;t even separated by a &#8220;generation&#8221; (I don&#8217;t believe in this as a static term, as several people have written about recently, but as a placeholder&#8230;). Although they are half my age or less for the most part, honestly.</p>

<p>And entertainingly, none of us thought of calling it the <em>number</em> sign.</p>

<p>I laughed about this again because when you type it as the title of a post in an Octopress <code>rake new_post</code> command, it&#8217;s automatically converted to <code>the-number-sign</code>, as you can see in this post URL.</p>

<p>Vocabulary is interesting.</p>

<p>(Other things that are interesting: e-textiles, libraries as makerspaces, and the exciting trends in grade school education! and open badging! and the work being done around me all the time!)</p>

<p>Teaching kids how they can make stuff they want to make is <em>great.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[instabitly]]></title>
    <link href="http://aerenchyma.github.io/blog/2013/03/25/instabitly/"/>
    <updated>2013-03-25T00:29:00-04:00</updated>
    <id>http://aerenchyma.github.io/blog/2013/03/25/instabitly</id>
    <content type="html"><![CDATA[<p>Quick drive-by: <a href="https://github.com/aerenchyma/instabitly">instabitly</a>, a script I wrote recently to import saved links from <a href="http://instapaper.com">Instapaper</a> to <a href="https://bitly.com/">bit.ly</a>.</p>

<p>I did it for personal reasons &#8211; primarily because I want all this stuff stored redundantly. Obviously I haven&#8217;t solved that problem in its entirety, but there were also other reasons. Because I care about things like this. There&#8217;s a README. More, like more in the other documentation series I&#8217;ve discussed so far, will have to appear after recent projects calm down some.</p>

<p>Let me also take this opportunity to encourage you to <a href="http://www.instapaper.com/subscription">support Instapaper</a> if you can and it&#8217;s a service you like/use.</p>

<p>In my imaginary free time, I have been trying to absorb all the <a href="http://pyvideo.org/category/33/pycon-us-2013">fantastic PyCon</a> <a href="https://speakerdeck.com/pyconslides">talks</a> (I have an active imagination).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing, testing]]></title>
    <link href="http://aerenchyma.github.io/blog/2013/02/18/initial-post/"/>
    <updated>2013-02-18T15:24:00-05:00</updated>
    <id>http://aerenchyma.github.io/blog/2013/02/18/initial-post</id>
    <content type="html"><![CDATA[<p>Initial post. Content to come.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[what hacker school is like (or, what I did this summer)]]></title>
    <link href="http://aerenchyma.github.io/blog/2012/08/15/what-hacker-school-is-like/"/>
    <updated>2012-08-15T07:48:00-04:00</updated>
    <id>http://aerenchyma.github.io/blog/2012/08/15/what-hacker-school-is-like</id>
    <content type="html"><![CDATA[<p>Last May, when I was first thinking about applying to <a href="http://www.hackerschool.com">Hacker School</a>, I did a lot of searching for posts and tweets about it. I wanted to know what the experience was like, the day-to-day, the people. I found some, and <a href="https://www.hackerschool.com/about" target="_blank">the website does give a very accurate picture</a> of <a href="https://www.hackerschool.com/testimonials" target="_blank">the environment</a> around all the time at Hacker School, but I wished for more because I&#8217;m curious, especially about the environment alongside the programming. Hacker School is all about being a better programmer &#8211; going after that goal has come with a lot of side pluses.</p>

<p>(There&#8217;s now <a href="http://www.reddit.com/r/IAmA/comments/y7kld/iama_hacker_at_hacker_school_in_nyc_ama/">an IAmA for Hacker School going on @ Reddit</a>, where a bunch of current Hackerschoolers and alums are articulately answering questions. So you should go there.)</p>

<p>First, I&#8217;d say that if you have a real inclination to apply &#8211; if you think you might love programming &#8211; if the sound of Hacker School interests you &#8211; do it. Do it soon, do it now! <a href="http://www.hackerschool.com/apply">Just click here</a>! I understand that moving to NYC on somewhat quick notice is intimidating, that you&#8217;re not sure what will happen with work or other potential commitments, that maybe the cost is concerning, but I swear the facilitators and even your fellow batch-mates (especially if there are people coming back who are familiar with the process!) are incredibly helpful with that stuff, in particular with finding housing. It&#8217;s workable, not so bad, even without much stress!, and having the option is worth the application time.</p>

<p>If you&#8217;re a woman who needs financial assistance, I can&#8217;t emphasize enough, <i>don&#8217;t</i> hesitate because you&#8217;re afraid it won&#8217;t work out! This batch, every accepted woman who requested a grant received one, and there&#8217;s no reason to believe that won&#8217;t happen again.</p>

<p>Secondly, here&#8217;s another addition to the growing library of &#8216;what it&#8217;s like at Hacker School&#8217;. As we approach the end of batch[3] &#8211; (numbers started at 0, of course), I&#8217;m just gonna list you some things I did this summer, in no particular order.</p>

<ul>
<li><p>Spent a wholly worthwhile thirteen total out of about forty hours in Central Park one Thursday - Friday. Most of those were waiting in line for tickets to As You Like It in the Park. Many of those hours were talking and laughing with a Hacker School friend. Some were making an attempt at a picnic at sunrise. Some of them were us programming in Python in a text editor and REPL with an Android phone. (Three of the hours were at night, watching the show, which was one of the best Shakespeare performances I&#8217;ve ever seen.)</p></li>
<li><p>Played in a Hacker School Ping Pong tournament. (No requirement to be especially good. Hence &lt;&#8211; .) The first Ping Pong tournament, a laptop was pulled out midway through&#8230; now, there is a relative-player-ranking system that a fellow Hackerschooler implemented.</p></li>
<li><p>Almost made it to building and launching homemade water rockets.</p></li>
<li><p>Went on an 11-person, 120-total-dumpling tour in Chinatown. Wandered for hours below 14th street talking about fascinating things incl. translations of brand names and living in different areas of the country. (&#8230;not on the same day.)</p></li>
<li><p>Got delicious Malaysian food, tasted the best guacamole of my life, ventured to Long Island for a cupcake baked by an awesome fellow Hackerschooler (worth the trip!). I&#039;ve eaten crazy delicious stuff while in New York [and most of it wasn&#8217;t too expensive + in good company].</p></li>
<li><p>Had many dinners and lunches and otherwise hanging out with alums, current batch members, Hacker School facilitators wherein there were discussions of topics ranging from the structure of Git, to islands in the Pacific where time is measured differently, to what is nerve-wracking about interviews, to the best kind of chocolate (no consensus), to what we were like as teenagers in various capacity, to awesome books recently read, to the differences between ricotta, queso fresco and paneer.</p></li>
<li><p>Collapsed laughing over the packaging of bear-shaped cookies sold at a nearby cafe during a quick programming break. Began to learn Cued Speech. Ran outside to dance around in a sudden rainstorm by the Brooklyn Bridge.</p></li>
<li><p>Got basically addicted to iced coffee: people at a nearby cafe* have started recognizing some of our orders; we joke about it, slash about how many times we&#8217;ve been there. <s>Each day.</s> I&#8217;ve been there a&#8230;lot. (Coffee ice cubes in the iced coffee/espresso drinks. Need I say more.)</p></li>
<li><p>Learned tons about parsing, web scraping, Ruby, dealing with dynamic web content, tree- and graph-traversal algorithms, multiple web frameworks, client-side Javascript debugging, how to structure my time, how to read a large code base better, short presentations, window managers, various contributions to open source projects, awesome <a href="http://en.wikipedia.org/wiki/REPL">REPL</a>s, how to use Git well (and <a href="http://marthakelly.github.com/blog/2012/06/04/hacker-school-day-one/" target="_blank">don&#8217;t worry at all</a> if you don&#8217;t know about any one or any of those things). Also, about baking, varieties of international visas, mapping, moving, chemicals, New York, regions of the US, circuits, public speaking, work environments, acidic agents in cheese-making and tons of other things; that&#8217;s not a comprehensive list. I&#8217;m going back to school (for grad school in CS) in the fall (this was already a plan when I applied to Hacker School), but I now feel solidly on a trajectory to doing whatever the hell I want, and learning whatever that requires, in a way I did not at the beginning of June. (I&#8217;ve also gained an even more thorough respect for transportation networks, something I already loved a lot.) Seeing pairs of people attempt things totally new to them and be ridiculous successful while you and others do the same at the next table is the best.</p></li>
<li><p>Met some of the most impressive and inspiring thinkers, programmers, cooks, writers, feminists, and <i>people</i> I&#8217;ve ever met at once. I&#8217;ve made really good friends with whom I&#8217;ve done lots of entirely random and excellent things, who have changed how I think about things spanning-realms-within and far-beyond programming, and I&#8217;m not planning to disappear &#8211; I&#8217;ll be back to visit.</p></li>
<li><p>More than a year later, I come back to this post, and while I have plenty to add, the most important cultural thing I can say about Hacker School now is that not only do I continue to realize things I gained in the summer of 2012, programming and other-wise, but on numerous trips around the country (the US, in my case), it&#8217;s often Hacker Schoolers in all these cities that make them feel a little bit like home.</p></li>
</ul>


<p>You should probably apply. If you read this you should apply. (If you didn&#8217;t, and you enjoy programming, you should also apply, but that&#8217;s probably not relevant at this juncture.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[highlight of the job]]></title>
    <link href="http://aerenchyma.github.io/blog/2012/05/02/highlight-of-the-job/"/>
    <updated>2012-05-02T14:15:00-04:00</updated>
    <id>http://aerenchyma.github.io/blog/2012/05/02/highlight-of-the-job</id>
    <content type="html"><![CDATA[<p>On May first, I reached the end of Michigan&#8217;s 2012 Winter semester, and with it the end of one of the best jobs. A student called the deadline for the final projects the &#8220;end of an era&#8221; &#8211; that&#8217;s what it felt like to us (the staff), too. (&#8220;It feels like we&#8217;re doing twenty projects!&#8221;)</p>

<p>Except that it&#8217;s more thrilling to watch people work together and seriously, rapidly and usefully learn stuff, and help each other &#8211; better to watch forty-some eureka moments than only have a few yourself.</p>

<!-- more -->


<p>I&#8217;ve been very lucky jobwise, this school year, overall. But the off-chance I got to IA for an intro programming class has lit up my life, in the worst, best, and cheesiest sense of the words. (I know, I make me feel ill, too.) Nothing, except living in a co-op, has taught me more about <i>people</i> and dealing with and reacting to others responsibly; in no job I&#8217;ve ever had, including &#8216;being a full-time student&#8217;, have I ever come home feeling like I did as many worthwhile things with my day (though certainly there are others where finishing weeks, or projects, has left me feeling as accomplished).</p>

<p>But I&#8217;ve rarely been as amazed as I often was in that lecture hall. I feel like I got to know more than fifty people this past semester, and when they left the exam, I was glad for them all, and my co-IA (who was brilliant) and I were, if anything, underestimating when we told them how proud we were and how much luck we wished for them in the future. I&#8217;ve never seen students leave an exam with so much glee and pride, and I&#8217;ve never been so sorry to see quite that many people go. (I didn&#8217;t get along with <i>that</i> many people in my high school class&#8230; that&#8217;s been a while.)</p>

<p>I&#8217;ve known for years that teaching someone else is one of the best ways to learn something thoroughly, but I didn&#8217;t know the extent to which it would change how I thought about learning, and how I thought about myself. My students have taught me good lessons over and over again. Those who struggled with concepts and kept coming back, those who leaned over to help others without giving them the answers. &#8220;Let&#8217;s break it down.&#8221; Those who played music as office hours before the final crept later and later, and laughed when I danced (just a little). &#8220;Even the GSIs are getting into it!&#8221; Well, yeah &#8211; we want to have fun too. (GSIs we weren&#8217;t, but for all intents and purposes. It was a position I&#8217;m not used to being in, but I enjoyed it.)</p>

<p>I felt heading into the job that in terms of programming, a strength of mine was explaining programming concepts, because I struggled at first and then crested the &#8211; what? the hill of difficulty? and have loved programming and building things with code ever since, but in my upper-level classes, I recognized my students&#8217; struggle on a new level and I sympathized, and I think that helped. Time-depth-wise, I was closer to their level than the rest of the staff team, by quite a lot, and though that made me nervous at the get-go, it turned out to be really valuable. I&#8217;m endlessly glad I was not the only staff member, but I work well in a team anyway (and I had an <i>awesome</i> co-IA). It is difficult to remember what it&#8217;s like <i>not</i> to know stuff (e.g. what it means to store a Python dictionary in a variable, what a for-loop does), but I found the reach backwards easier and easier as I went on. As I told the professor for whom I worked, I found myself using more than anything else things I&#8217;d learnt while playing around on my own, and things I&#8217;d learnt in the class itself, more than I used knowledge from subsequent classes.</p>

<p>Every meaningful &#8220;thank you&#8221; was ridiculously valuable to me. Every moment of sudden understanding. The look on one girl&#8217;s face as she got a web app working: &#8220;This is the best thing I&#8217;ve ever seen in my whole life; I&#8217;m so happy!&#8221; A guy&#8217;s grin as he said &#8220;Oh! We&#8217;re extracting information from the internet!&#8221; The genial frustration (&#8220;I&#8217;m back to make your life miserable, Jackie!&#8221; / &#8220;Never. What&#8217;s up?&#8221;). The glee I came to expect as I whirled on a heel to say &#8220;YES! Exactly! So what type will this be?&#8221;</p>

<p>I wanted to make a pun about dynamism and Python being dynamically typed here, but instead I&#8217;ll say that students gave me and my co-IA thank you cards they signed, and nominated us for awards that we weren&#8217;t quite eligible for (not being grad students), so the school we worked for invented a new award for us &#8211; but the students&#8217; high-fives and compliments to each other because they understood what the others were doing with APIs and Oauth tokens were the best part. &#8220;Amazing work,&#8221; they started saying to each other &#8211; and to <i>us</i> &#8211; and I couldn&#8217;t agree more. It isn&#8217;t that there were no painful or frustrating parts &#8211; holy, were there ever &#8211; but that all of them were worth it, and I learnt a lot about how I&#8217;d deal with them if that were on me. Maybe someday. I&#8217;m only sorry I can&#8217;t IA this class again.</p>

<p>Sappy as hell, OK. Who knows, that might&#8217;ve changed my career path. I guess I&#8217;ll see.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[and some killer awesome students, too]]></title>
    <link href="http://aerenchyma.github.io/blog/2012/03/06/and-some-killer-awesome-students/"/>
    <updated>2012-03-06T16:04:00-05:00</updated>
    <id>http://aerenchyma.github.io/blog/2012/03/06/and-some-killer-awesome-students</id>
    <content type="html"><![CDATA[<p>A brief interlude, relating to teaching programming. My co-IA and I subbed for lecture today; the professor we work for is at a conference in another state.</p>

<p>The class has a facebook group for posting tips and asking each other questions. Halfway through class (I found this out afterward), this appears on the group, and by half an hour after the class is over, it looks like this:</p>

<p><img src="http://jaclynzetta.files.wordpress.com/2012/03/screen-shot-2012-03-06-at-4-17-18-pm.png" alt="image of a facebook post that says We have some killer GSIs for this class. 21 people like this, 5 comments." /></p>

<p>What a great job.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[what would you say?]]></title>
    <link href="http://aerenchyma.github.io/blog/2011/11/07/what-would-you-say/"/>
    <updated>2011-11-07T16:10:00-05:00</updated>
    <id>http://aerenchyma.github.io/blog/2011/11/07/what-would-you-say</id>
    <content type="html"><![CDATA[<p><a href="http://www.igniteannarbor.com/" target="_blank">Five minutes. Twenty slides. What would you say?</a></p>

<p>I spoke at Ignite Ann Arbor on Sunday &#8211; &#8220;Data Entry, Coffee Dripping, and Other Things as Interesting as Watching Paint Dry.&#8221; You can see the video and my slides linked on my <a href="http://aerenchyma.github.io/about/">about</a> page.</p>

<p>A year ago, I was talking about that with a friend in the common room of my co-op. I wrote about that in my first grad school applications. Months later, the same friend suggested I do an Ignite talk about paint drying. He was only half joking, if that.</p>

<p>I considered the idea and I waited and on October tenth (the deadline for the call for speakers) I figured if I never pressed the button, well, I never would.</p>

<p>I did.</p>

<p>I was accepted, and really nervous, and it turned out awesome, Ignite 6. It was awesome for me because I did fine and enjoyed it as I did it. It was pretty much the opposite of painful, though that&#8217;s in no small part due to practice and Emily (<a href="https://twitter.com/epuckett">@epuckett</a>)&#8217;s advice &#8211; and because of all the people who showed up to see it, and also the people who came to see me. I&#8217;m grateful to have so many fantastic friends, people who wanted to be there, supportive people I work with; their help was incredibly valuable.</p>

<p>It&#8217;s harder to prepare for those five minutes than to actually do it. It&#8217;s easy to forget how many people applied for a similar reason to me and have similar amounts of public speaking experience (not tons, at the time, though it wasn&#8217;t the public speaking aspect that worried me &#8211; it was whether I would disappoint myself in my representation, because the process of paint drying, like the chemicals in coffee and data entry jobs, is seriously cool).</p>

<p>Awesome, because I know now what goes into preparing for that and it&#8217;s more impressive up close, though it was impressive from further away too. Awesome, because there was stuff about food and cold (and a lot about energy) and schooling and learning and applying lessons from non-school, and there were interested people in the audience, which is a good part. &#8220;Science is cool, y&#8217;all.&#8221;</p>

<p>Let it be noted, for the sake of honesty, that I spent the two weeks prior to speaking almost wishing I hadn&#8217;t applied, fighting procrastination of completing my slides because of the nervousness, and then slightly freaking out about arranging what I would say (yes, in that order). &#8220;Tell me not to do it,&#8221; I said, of deciding to do a presentation ever again. &#8220;Don&#8217;t let me do this ever again. Stop me.&#8221; A friend said, &#8220;I won&#8217;t. But yeah, okay.&#8221; I made a face, in part because I guessed he might be right.</p>

<p>Well, okay: He was right, as was the friend who told me to do it in the first place, and I&#8217;ve learnt my lesson.</p>

<p>I am more than pleased to have done this. Also &#8211; &#8220;How&#8217;d you get to be such a geek?&#8221; &#8211; best compliment I&#8217;ve ever received from someone I didn&#8217;t already know.</p>
]]></content>
  </entry>
  
</feed>
