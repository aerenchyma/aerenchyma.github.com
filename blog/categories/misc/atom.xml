<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: misc | everything's interesting]]></title>
  <link href="http://aerenchyma.github.com/blog/categories/misc/atom.xml" rel="self"/>
  <link href="http://aerenchyma.github.com/"/>
  <updated>2013-10-05T03:00:29-04:00</updated>
  <id>http://aerenchyma.github.com/</id>
  <author>
    <name><![CDATA[Jackie Cohen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Globes and maps]]></title>
    <link href="http://aerenchyma.github.com/blog/2013/07/25/globes-and-maps/"/>
    <updated>2013-07-25T17:07:00-04:00</updated>
    <id>http://aerenchyma.github.com/blog/2013/07/25/globes-and-maps</id>
    <content type="html"><![CDATA[<p><a href="http://bit.ly/18Akcfu">Writes Bonnie Bogle of MapBox</a>,  "The diversity of our team has made our team stronger, our tools better, and our approaches smarter and more innovative."</p>

<p>The aim I see here is really great. This is what I'd like to see more of.</p>

<p>When industries, platforms, and organizations I care about acknowledge not just that they care about diversity, but that they can explain why they care and what they want to do, that they're serious for real reasons, I am pretty likely to talk about them positively, and excitedly, and often, to want to and try to use their products or services. I don't think I'm alone there.</p>

<p>I'm glad to see this for many reasons, obviously. But maps affect nearly everyone in some way or another. Maps have effects on everyone and how people deal with others. How they travel. What they think of places they frequent and places they've never been. I don't know this for sure, but I know it for me, and I see evidence of it everywhere. Maps help people form opinions on and gain knowledge about the public transit systems available (and unavailable!) to them. From maps arise issues of accessibility on multiple axes, a lot of frustration, metric tons of joy. (I love maps.) They help and hurt, but mostly, and certainly ideally, I believe they can and should and do help, and I think the world is moving closer, closer, to wholly positive maps all the time.</p>

<p>There's always a long way to go but maps help me figure that out.</p>

<p>So for now, yeah: this made me happy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Here at the edge]]></title>
    <link href="http://aerenchyma.github.com/blog/2013/05/25/here-at-the-edge/"/>
    <updated>2013-05-25T21:13:00-04:00</updated>
    <id>http://aerenchyma.github.com/blog/2013/05/25/here-at-the-edge</id>
    <content type="html"><![CDATA[<p><a href="http://www.powells.com/biblio/9780872863323"><em>Close to the Machine</em></a> was published in 1997, which was also the year I first (technically) got access to the Internet and eleven years before I seriously thought about programming myself.</p>

<p>I came across the memoir in 2013, after Ellen Ullman's op-ed <a href="http://nyti.ms/10UrtAc">How to Be a 'Woman Programmer'</a> was published in the New York Times on May 18.</p>

<!-- more -->


<p>The second line of that op-ed reads <em>I wrote code that ran at the levels between flashy human interfaces and the deep cores of operating systems, like the role of altos in a chorus, who provide the structure without your taking much notice of their melodic lines</em>, and I was instantly fascinated. I am interested in all the things she mentions in that sentence, but altos-in-a-chorus-y scripts I recognize as the kind of programming that, so far at least, brings me the most joy. (It's a tough choice.)</p>

<p>This is for reasons Ullman talks about. Describing sitting at a table with clients for a "city-wide database for AIDS service providers," she writes about the disconnect between she herself, a senior programmer tasked with building this system, and the other people around the table: runners of clinics, doctors, dentists, hospice directors. <em>I was there at the edge,</em> she writes, <em>the interface of the system, in all its existence, to the people, in all their existence.</em><sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup></p>

<p>Right now, that's the most thrilling thing for me about <em>being a programmer</em>, and also the most frustrating. There is so much knowledge I learnt over years that I wish I could convey in a matter of minutes. But my ability to make something that I <em>know</em> makes someone's life easier, watch them use it, and make it better for their use, never gets old.</p>

<p>Still: I don't know others' jobs better than they do. Maybe <em>I</em> think a command-line script will solve a lot of problems but it won't help if the users-to-be are confused by "the command line." And maybe I'm <em>wrong.</em> <a href="https://medium.com/close-to-the-machine/8c2d491886fa">Diana Kimball wrote about arrogance and obsession</a>, and how arrogance can be a tool. This resonates with me. (Sometimes, I'm right.) But the same kind of obsession that makes me happy also scares me. I've walked away from conversations about problem-solving feeling like an ass. <em>I talked, asked questions, but I saw I was operating at a different speed from the people at the table,</em> Ullman writes.<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup> That's familiar. Sometimes I'm focusing on a detail that is important for the <em>database</em> but not the users. Sometimes I'm rushing ahead -- this platform, that language, yes yes yes... What?</p>

<p>Many of these tools to switch on are incredibly useful in programming but the opposite when explaining, and so walking the line between the technical and the non-technical (these are terms I hesitate to use) -- say, teaching programming, or working on tech systems for a multi-disciplinary organization -- means careful attention is important. What are my assumptions (today)?</p>

<p>Ellen Ullman gives voice to a lot of the things that scare me, and a lot of the things that I find incredibly exciting. <em>In . . . software engineering, there is something almost shameful in this helpful, social-services system we're building. The whole project smacks of . . . people who just want to use the stuff we write and don't care how we did it.</em><sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup> I think that I understand what this says, but I don't feel good about understanding it. Yet also, I love that I kind of get it. <em>We had started with some scratchings on a white-board and built this: this operational program, this functional thing.</em><sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup> That realization, that's <em>amazing.</em> Every time.</p>

<p>I finished <em>Close to the Machine</em> a couple days ago -- a quick read, and one I enjoyed -- and I'm still thinking about it because of precisely this problem. Computer Science often revolves around complexity, but complexity is definitely not unique to it. I talk to my friend, a manager at a non-profit organization, about how a script could speed up tasks. Together, we write something that brings one process from months to days long, but just because programming can speed things up does not mean there isn't always more.</p>

<p>Programming is an <em>awesome</em> tool and also an awesome, awesome practice. But while I believe there is an huge amount of value in all stripes of Computer Science and programming as disciplines -- and do I ever, especially when it's approached the way <a href="http://bit.ly/ZlCrEw">it is at Hacker School</a> -- I also think programming's value depends a great deal on domain expertise. Its use as an awesome tool depends often on the experiences of hospice directors and doctors and runners of clinics. The knowledge of economists, and leaders of campaigns against hunger, and linguists doing fieldwork. Its value is, in my opinion, multiplied exponentially by experience -- not just experience programming, but experience of how an medical clinic worker goes about their day, for instance.</p>

<p>The value of programming depends on willingness to listen. Listening to other programmers is important, but also keeping one foot out of <em>the universe where two human beings can simultaneously understand the statement 'if space is numeric!'</em> matters, sometimes.<sup id='fnref:5'><a href='#fn:5' rel='footnote'>5</a></sup> And yet often the best work is done when absorbed in that universe. These facts coexist, and Ullman's work is one of the first (non-tweet) things I've read that acknowledges this.<sup id='fnref:6'><a href='#fn:6' rel='footnote'>6</a></sup></p>

<p>I liked spending hours in a beige classroom scribbling logic on a chalkboard with other people -- as Ullman puts it, <em>other weird logic-dreamers like myself.</em> It's something I love about programming, and something I loved about <a href="http://www.hackerschool.com/about">Hacker School</a>: there's always more. There's certainly happiness in belonging to a group of people who love something, but there's a danger in homogenizing that love in your head. Because it makes it very easy, then, to keep people <em>out</em> instead of bringing people in. There are infinite kinds of experience, and equally many ways to love something.</p>

<p>If everyone were "a programmer" first, little to nothing would ever get done outside that numeric space universe.</p>

<p>But if more people were "a programmer" by varied definitions, or offered the opportunity to be if they want -- the opportunity to truthfully say 'I've read a line or more of code'? 'I've written a short program'? 'I understand possibilities this tool could offer me'? 'I am committed to making sure a new system works for the people who will need to <em>use</em> it'? 'I will talk to people in technological domains about the complexity <em>I</em> am faced with and hope we can reach common ground', or something else -- then, I think more <em>would</em>. I've seen firsthand that it's useful and interesting to hear about types of complexity I'm unfamiliar with. It isn't because I am a programmer. And this: <em>We build the system, we live in its midst, and we are changed.</em><sup id='fnref:7'><a href='#fn:7' rel='footnote'>7</a></sup> That's certainly not unique to programmers, but I think it's <em>common</em> to them.</p>

<p>That's pretty cool.</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p> Ullman, Ellen. <u>Close to the Machine</u>. Picador: USA. 1997; 2012 reprint. p 12.
<a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p> <em>Ibid.</em>
<a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p> <em>Ibid,</em> p 9.
<a href='#fnref:3' rev='footnote'>↩</a></p>
</li><li id='fn:4'><p> <em>Ibid,</em> p 173.
<a href='#fnref:4' rev='footnote'>↩</a></p>
</li><li id='fn:5'><p> <em>Ibid,</em> p 2.
<a href='#fnref:5' rev='footnote'>↩</a></p>
</li><li id='fn:6'><p> I'm sure there are others/similar and welcome recommendations
<a href='#fnref:6' rev='footnote'>↩</a></p>
</li><li id='fn:7'><p> <em>Ibid,</em> p 30.
<a href='#fnref:7' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things worthwhile]]></title>
    <link href="http://aerenchyma.github.com/blog/2013/04/29/things-worthwhile/"/>
    <updated>2013-04-29T23:55:00-04:00</updated>
    <id>http://aerenchyma.github.com/blog/2013/04/29/things-worthwhile</id>
    <content type="html"><![CDATA[<p>In between projects, or at least time for documentation of them here (my very own Raspberry Pi arrived the other day! But I must acquire other hardware to do the project(s) I want first. I've been shoving new front-end-dev-y information into my head rapidly for a work project over the past week or so!) --</p>

<p><a href="http://geekfeminism.org/author/brainwane/">Sumana Harihareswara</a> posted <a href="http://geekfeminism.org/?p=7554">this</a>, "From 'Sit Still' to 'Scratch your own itch'" on <a href="http://geekfeminism.org">GeekFeminism.org</a> recently, and I wish to share it all over because I think it's wonderful.</p>

<p>I commented, but I'm echoing a slightly edited version of that comment here, with context included.</p>

<!-- more -->


<p>She lists some ideas and things to remember about "alternative pathways" to learning, and to getting into open stuff. There's an unspoken (and sometimes spoken) belief in large swathes of the open source world -- well-meaning, almost always! -- that not only is a good way of getting into programming (or really learning anything, especially anything that involves <em>making</em> ) to "scratch your own itch," but that this is the ideal way, the real way, the way that makes you legit, whatever that means.</p>

<p>Well, no.</p>

<p>I think this is a massively useful reminder. It's something I struggle with: 'but I want to make something <em>new.</em>' I know what it's like to get slowed down by trying to make something more generalizable.</p>

<p>I also think there are increasingly large sections of the internet and the world replete with great resources for new programmers or people who want to learn to program, or learn about programming, or learn about building stuff with circuits, or learn about automating putting a butterfly on every piece of clothing they own (a real, and seriously cool example, but that's another story). But there's a piece brought up in her piece I've linked that is often forgotten: all the practicing has value, and making something is <em>cool.</em></p>

<p>Sumana writes, <em>It is fine to simply piggyback on existing projects and drift around a bit learning lots of little things that way</em> -- more people should hear this. She writes, <em>Embrace boringness</em>  and explains that <em>If an idea appeals to you but there’s an inner censor saying “that’s too boring” or “what’s the use,” you can tell that inner voice that Sumana says “shut up.”</em></p>

<p>I deeply appreciate this, especially in the context of the popular Django tutorials, to be honest. I get frustrated making things I know have been made before if I don't have an idea to improve it, to make it mine. I tell other people, but seem to have a hypocritically difficult time learning myself, that sometimes doing one version without variation is a valuable way to learn and make an altered version better, let alone make me a better programmer. Yes, there are lots of blogging systems out there, and if you make a blog where you can post things, or edit things, or delete things or none or some of the above, even if you don't want to use it, it is an <em>unqualified awesome</em> that you made it. It's valuable time spent if you wanted to learn stuff, to make something, and it can make you better at more than just building a blog later if you want it to but these aren't the reasons to do it for me. <em>You made that</em> and learned stuff and it was neat, that's enough.</p>

<p>That's not a condescending head-pat sort of comment. When I say "that's COOL" I mean it, and not believing it for myself (indeed not believing it for anyone) is ridiculous. Time on the ground is valuable -- probably the most valuable thing if <em>being a great programmer</em> is a goal, and <em>this</em> is generalizable.</p>

<p>(I learn things from <a href="http://hackerschool.com">Hacker School</a> even nearly a year after I flew to New York for it.)</p>

<p>Anyway, I recommend it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[the # sign]]></title>
    <link href="http://aerenchyma.github.com/blog/2013/04/17/the-number-sign/"/>
    <updated>2013-04-17T22:40:00-04:00</updated>
    <id>http://aerenchyma.github.com/blog/2013/04/17/the-number-sign</id>
    <content type="html"><![CDATA[<p>Today, I went back to my old high school to help a friend teach middle schoolers an introductory workshop on Python and Raspberry Pi. It was thoroughly awesome, but amidst the awesome -- which I'm not going to talk about in detail yet -- I noticed something interesting:</p>

<p>Discussing comments in Python, someone in the room who graduated college several years before I did called '#', without hesitation, <em>the pound sign.</em></p>

<p>I debated (I was the one who introduced the comment syntax first), and settled on <em>hashtag</em> because I was honestly not sure if the kids would know what "pound" meant in this scenario. It is "pound" to me, but I <em>thought</em> to hesitate -- it wasn't a realization that came from looks of confusion. <em>Hashtag</em> seemed like the most accessible to 12-year-olds (n.b. in a very privileged place).</p>

<p>I got teased about this. By my friend and fellow teacher, not by the kids. He asks, "When we say 'hashtag', is that how you'd refer to this symbol?" They nodded yes. He laughed, and I did too; he, and I, and these kids, aren't even separated by a "generation" (I don't believe in this as a static term, as several people have written about recently, but as a placeholder...). Although they are half my age or less for the most part, honestly.</p>

<p>And entertainingly, none of us thought of calling it the <em>number</em> sign.</p>

<p>I laughed about this again because when you type it as the title of a post in an Octopress <code>rake new_post</code> command, it's automatically converted to <code>the-number-sign</code>, as you can see in this post URL.</p>

<p>Vocabulary is interesting.</p>

<p>(Other things that are interesting: e-textiles, libraries as makerspaces, and the exciting trends in grade school education! and open badging! and the work being done around me all the time!)</p>

<p>Teaching kids how they can make stuff they want to make is <em>great.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10 things I learnt as default tech support]]></title>
    <link href="http://aerenchyma.github.com/blog/2013/04/10/10-things-i-learned-as-default-tech-support/"/>
    <updated>2013-04-10T09:36:00-04:00</updated>
    <id>http://aerenchyma.github.com/blog/2013/04/10/10-things-i-learned-as-default-tech-support</id>
    <content type="html"><![CDATA[<ol>
<li><p>Sometimes, the best system is Windows XP and Word 2000 and the mail app you hate.</p></li>
<li><p>The hardest part of unpaid tech support is learning when not to argue about (1).</p></li>
<li><p>"Being unpaid tech support" == being the youngest person in a group by 20+ years, having the most technical experience in a group re: profession or degree, or whichever turns out to be most applicable.</p></li>
<li><p>"whichever turns out to be the most applicable" in (3) is chiefly determined by your confidence in tone, if there is any question as to who's landed the job.</p></li>
<li><p>"Why" is the easiest question to ask and the hardest one to answer.*</p></li>
<li><p>I do not like the Mac OS X mail app.</p></li>
<li><p>Even beginning to describe the differences between what you work on and what their problem is tends to be worth it approximately 15% of the time. **</p></li>
<li><p>The fact that email (and all of the cloud) is (<em>theoretically</em>) unconstrained by political boundaries is a real conceptual jump from "snail mail." Especially if one's professional life has been largely spent, for example, writing books on yellow notepads.</p></li>
<li><p>"I can solve this problem I've never seen before", outside of work or a personal project, is often worth the frustration.***</p></li>
<li><p>You're probably familiar with <a href="http://xkcd.com/627/">the quintessential flow chart</a> (credit Randall Monroe under a <a href="http://creativecommons.org/licenses/by-nc/2.5/">BY-NC</a> license), but there are people for whom the system this chart depends on makes sense, and there are people to whom it's another universe. The boundary is fluid -- I firmly believe this -- but if you're the resident expert (or whatever), it sure doesn't feel that way.</p></li>
</ol>


<p><font size="-4"></p>

<p>*I have further thoughts about this, but they're neither publicly available nor all written down</p>

<p>**I made this number up.</p>

<p>*** Not always.
</font></p>

<p><font size="-4"><strong>notes on tech support background below</strong></font></p>

<!-- more -->


<p><font size="-4">
I've worked in desktop support -- a little over two years ago now, on a hospital IT staff. I've also had interactions for a long time with others working in tech support roles/full-time jobs throughout most of my life. The post itself was prompted by a vacation on which I was the youngest by 45 years: let's guess what happened, eh? I think it was destined to be at that point, whether or not I'd actually let on that I work with computers.</p>

<p>A lot of years ago, young me, and my even younger brother, accidentally changed the resolution on the computer once and, after some struggles to return the icons to their usual, unpixelated sizes, I sent a good friend of our dad's, a computer consultant, a detailed email about what had happened and what we'd tried, asking how to fix it. He was grateful for the detail ("you wouldn't believe how many people don't..."), and I was grateful in return. I don't have the email anymore, but I remember it. And the worry over tales in the hospital IT office of doctors known to have a roar specially bottled for the tech support was assuaged by the look on the face of the nurse to whom I explained the use of a laptop trackpad.</p>

<p>This is to say, oh hey sarcasm font? (it keeps me alive! :D :D) -- and I really admire for the patient people who work(ed) full- or part-time in tech support longer than I have done so far. It's a really important job in a million circumstances, and it leads to pretty interesting revelations. (This vacation? I swear I didn't scream, just almost. But I learnt a lot.) I obviously have only my fraction of the experiences, yes. As usual, I welcome criticism and respect trying to learn new things. As with all lists of wide and silly generalizations, exceptions exist by the thousand, I know. [I've spent a lot (a LOT) of time on the internet.]
</font></p>
]]></content>
  </entry>
  
</feed>
