<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: misc | everything's interesting]]></title>
  <link href="http://aerenchyma.github.com/blog/categories/misc/atom.xml" rel="self"/>
  <link href="http://aerenchyma.github.com/"/>
  <updated>2013-04-30T00:18:10-04:00</updated>
  <id>http://aerenchyma.github.com/</id>
  <author>
    <name><![CDATA[Jackie Cohen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Things worthwhile]]></title>
    <link href="http://aerenchyma.github.com/blog/2013/04/29/things-worthwhile/"/>
    <updated>2013-04-29T23:55:00-04:00</updated>
    <id>http://aerenchyma.github.com/blog/2013/04/29/things-worthwhile</id>
    <content type="html"><![CDATA[<p>In between projects, or at least time for documentation of them here (my very own Raspberry Pi arrived the other day! But I must acquire other hardware to do the project(s) I want first. I've been shoving new front-end-dev-y information into my head rapidly for a work project over the past week or so!) --</p>

<p><a href="http://geekfeminism.org/author/brainwane/">Sumana Harihareswara</a> posted <a href="http://geekfeminism.org/?p=7554">this</a>, "From 'Sit Still' to 'Scratch your own itch'" on <a href="http://geekfeminism.org">GeekFeminism.org</a> recently, and I wish to share it all over because I think it's wonderful.</p>

<p>I commented, but I'm echoing a slightly edited version of that comment here, with context included.</p>

<!-- more -->


<p>She lists some ideas and things to remember about "alternative pathways" to learning, and to getting into open stuff. There's an unspoken (and sometimes spoken) belief in large swathes of the open source world -- well-meaning, almost always! -- that not only is a good way of getting into programming (or really learning anything, especially anything that involves <em>making</em> ) to "scratch your own itch," but that this is the ideal way, the real way, the way that makes you legit, whatever that means.</p>

<p>Well, no.</p>

<p>I think this is a massively useful reminder. It's something I struggle with: 'but I want to make something <em>new.</em>'</p>

<p>I also think there are increasingly large sections of the internet and the world replete with great resources for new programmers or people who want to learn to program, or learn about programming, or learn about building stuff with circuits, or learn about automating putting a butterfly on every piece of clothing they own (a real, and seriously cool example, but that's another story). But there's a piece brought up in her piece I've linked that is often forgotten: all the practicing has value, and making something is <em>cool.</em></p>

<p>Sumana writes, <em>It is fine to simply piggyback on existing projects and drift around a bit learning lots of little things that way</em> -- more people should hear this. She writes, <em>Embrace boringness</em>  and explains that <em>If an idea appeals to you but there’s an inner censor saying “that’s too boring” or “what’s the use,” you can tell that inner voice that Sumana says “shut up.”</em></p>

<p>I deeply appreciate this, especially in the context of the popular Django tutorials, to be honest. I get frustrated making things I know have been made before if I don't have an idea to improve it, to make it mine. I tell other people, but seem to have a hypocritically difficult time learning myself, that sometimes doing one version without variation is a valuable way to learn and make an altered version better, let alone make me a better programmer. Yes, there are lots of blogging systems out there, and if you make a blog where you can post things, or edit things, or delete things or none or some of the above, even if you don't want to use it, it is an <em>unqualified awesome</em> that you made it. It's valuable time spent if you wanted to learn stuff, to make something, and it can make you better at more than just building a blog later if you want it to but these aren't the reasons to do it for me. <em>You made that</em> and learned stuff and it was neat, that's enough.</p>

<p>That's not a condescending head-pat sort of comment. When I say "that's COOL" I mean it, but I don't believe it for myself and that's ridiculous. I never think musicians or visual artists are wasting their time by doing what they do, nor by practicing. Time on the ground is valuable -- probably the most valuable thing if <em>being a great programmer</em> is a goal.</p>

<p>(I learn things from Hacker School even almost a year after I flew to New York for it.)</p>

<p>Anyway, I recommend it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[the # sign]]></title>
    <link href="http://aerenchyma.github.com/blog/2013/04/17/the-number-sign/"/>
    <updated>2013-04-17T22:40:00-04:00</updated>
    <id>http://aerenchyma.github.com/blog/2013/04/17/the-number-sign</id>
    <content type="html"><![CDATA[<p>Today, I went back to my old high school to help a friend teach middle schoolers an introductory workshop on Python and Raspberry Pi. It was thoroughly awesome, but amidst the awesome -- which I'm not going to talk about in detail yet -- I noticed something interesting:</p>

<p>Discussing comments in Python, someone in the room who graduated college several years before I did called '#', without hesitation, <em>the pound sign.</em></p>

<p>I debated (I was the one who introduced the comment syntax first), and settled on <em>hashtag</em> because I was honestly not sure if the kids would know what "pound" meant in this scenario. It is "pound" to me, but I <em>thought</em> to hesitate -- it wasn't a realization that came from looks of confusion. <em>Hashtag</em> seemed like the most accessible to 12-year-olds (n.b. in a very privileged place).</p>

<p>I got teased about this. By my friend and fellow teacher, not by the kids. He asks, "When we say 'hashtag', is that how you'd refer to this symbol?" They nodded yes. He laughed, and I did too; he, and I, and these kids, aren't even separated by a "generation" (I don't believe in this as a static term, as several people have written about recently, but as a placeholder...). Although they are half my age or less for the most part, honestly.</p>

<p>And entertainingly, none of us thought of calling it the <em>number</em> sign.</p>

<p>I laughed about this again because when you type it as the title of a post in an Octopress <code>rake new_post</code> command, it's automatically converted to <code>the-number-sign</code>, as you can see in this post URL.</p>

<p>Vocabulary is interesting.</p>

<p>(Other things that are interesting: e-textiles, libraries as makerspaces, and the exciting trends in grade school education! and open badging! and the work being done around me all the time!)</p>

<p>Teaching kids how they can make stuff they want to make is <em>great.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10 things I learnt as default tech support]]></title>
    <link href="http://aerenchyma.github.com/blog/2013/04/10/10-things-i-learned-as-default-tech-support/"/>
    <updated>2013-04-10T09:36:00-04:00</updated>
    <id>http://aerenchyma.github.com/blog/2013/04/10/10-things-i-learned-as-default-tech-support</id>
    <content type="html"><![CDATA[<ol>
<li><p>Sometimes, the best system is Windows XP and Word 2000 and the mail app you hate.</p></li>
<li><p>The hardest part of unpaid tech support is learning when not to argue about (1).</p></li>
<li><p>"Being unpaid tech support" == being the youngest person in a group by 20+ years, having the most technical experience in a group re: profession or degree, or whichever turns out to be most applicable.</p></li>
<li><p>"whichever turns out to be the most applicable" in (3) is chiefly determined by your confidence in tone, if there is any question as to who's landed the job.</p></li>
<li><p>"Why" is the easiest question to ask and the hardest one to answer.*</p></li>
<li><p>I do not like the Mac OS X mail app.</p></li>
<li><p>Even beginning to describe the differences between what you work on and what their problem is tends to be worth it approximately 15% of the time. **</p></li>
<li><p>The fact that email (and all of the cloud) is (<em>theoretically</em>) unconstrained by political boundaries is a real conceptual jump from "snail mail." Especially if one's professional life has been largely spent, for example, writing books on yellow notepads.</p></li>
<li><p>"I can solve this problem I've never seen before", outside of work or a personal project, is often worth the frustration.***</p></li>
<li><p>You're probably familiar with <a href="http://xkcd.com/627/">the quintessential flow chart</a> (credit Randall Monroe under a <a href="http://creativecommons.org/licenses/by-nc/2.5/">BY-NC</a> license), but there are people for whom the system this chart depends on makes sense, and there are people to whom it's another universe. The boundary is fluid -- I firmly believe this -- but if you're the resident expert (or whatever), it sure doesn't feel that way.</p></li>
</ol>


<p><font size="-4"></p>

<p>*I have further thoughts about this, but they're neither publicly available nor all written down</p>

<p>**I made this number up.</p>

<p>*** Not always.
</font></p>

<p><font size="-4"><strong>notes on tech support background below</strong></font></p>

<!-- more -->


<p><font size="-4">
I've worked in desktop support -- a little over two years ago now, on a hospital IT staff. I've also had interactions for a long time with others working in tech support roles/full-time jobs throughout most of my life. The post itself was prompted by a vacation on which I was the youngest by 45 years: let's guess what happened, eh? I think it was destined to be at that point, whether or not I'd actually let on that I work with computers.</p>

<p>A lot of years ago, young me, and my even younger brother, accidentally changed the resolution on the computer once and, after some struggles to return the icons to their usual, unpixelated sizes, I sent a good friend of our dad's, a computer consultant, a detailed email about what had happened and what we'd tried, asking how to fix it. He was grateful for the detail ("you wouldn't believe how many people don't..."), and I was grateful in return. I don't have the email anymore, but I remember it. And the worry over tales in the hospital IT office of doctors known to have a roar specially bottled for the tech support was assuaged by the look on the face of the nurse to whom I explained the use of a laptop trackpad.</p>

<p>This is to say, oh hey sarcasm font? (it keeps me alive! :D :D) -- and I really admire for the patient people who work(ed) full- or part-time in tech support longer than I have done so far. It's a really important job in a million circumstances, and it leads to pretty interesting revelations. (This vacation? I swear I didn't scream, just almost. But I learnt a lot.) I obviously have only my fraction of the experiences, yes. As usual, I welcome criticism and respect trying to learn new things. As with all lists of wide and silly generalizations, exceptions exist by the thousand, I know. [I've spent a lot (a LOT) of time on the internet.]
</font></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing, testing]]></title>
    <link href="http://aerenchyma.github.com/blog/2013/02/18/initial-post/"/>
    <updated>2013-02-18T15:24:00-05:00</updated>
    <id>http://aerenchyma.github.com/blog/2013/02/18/initial-post</id>
    <content type="html"><![CDATA[<p>Initial post. Content to come.</p>
]]></content>
  </entry>
  
</feed>
