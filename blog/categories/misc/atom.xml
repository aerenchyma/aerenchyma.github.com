<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: misc | j{ackie} zetta {cohen}.net]]></title>
  <link href="http://aerenchyma.github.io/blog/categories/misc/atom.xml" rel="self"/>
  <link href="http://aerenchyma.github.io/"/>
  <updated>2015-05-11T18:56:02-04:00</updated>
  <id>http://aerenchyma.github.io/</id>
  <author>
    <name><![CDATA[Jackie Cohen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[we can go the distance]]></title>
    <link href="http://aerenchyma.github.io/blog/2015/05/01/the-grad-life/"/>
    <updated>2015-05-01T11:59:00-04:00</updated>
    <id>http://aerenchyma.github.io/blog/2015/05/01/the-grad-life</id>
    <content type="html"><![CDATA[<p>Years ago, I wrote <a href="http://jczetta.net/blog/2012/05/02/highlight-of-the-job/">this</a>.</p>

<p>I moved away, thinking I'd spent my last autumn as a student in Michigan, and wished those who came after me the best. I wrote in that thing that I wished I could do it again, but I was moving away, hoping there'd be something similar somewhere else. I was so sorry that I couldn't see the repeat, though.</p>

<p>The work I did for the next couple years was informed over and over again by what I did and how I felt that semester, newly graduated, teaching people things. What I didn't realize 100% at the time was that the necessity of being a voice of authority, and even more, a voice of calm when learning frustrating things, taught me -- yeah, yeah -- how to be the teacher and the person I wanted to be. Remember when you sat down and built that app for them? You can do it again. I can think of few things as helpful and as useful.</p>

<p>A year and a half ago, again a student in Michigan (that's another story) I saw a posting for a GSI (Graduate Student Instructor) position, the same professor as the professor for that class I refer to above. SI 106: Introductory Programming, economics of open source.</p>

<p>He hired me.</p>

<p>This week I wrapped up what for now is my last semester of three in a row teaching. With this week comes the end of my graduate school career (for now, probably forever), and also, undoubtedly, the end of one of the <em>best</em> jobs. I have been delighted to be a part of this in every way.</p>

<p>In 2012 I waxed nostalgic quickly, sappy as anything, wondering if my career path had been changed -- yeah, it had been. I guess I probably knew that then.</p>

<p>The three semesters of Graduate Student Instruction (GSI is what U-M calls graduate student TAs, essentially) that that IA job basically led to have been some of the best of my life to this point. The job teaching students new to, and long familiar with, college has taught me so much about leadership and mentorship, team building and explanations and pedagogy. About people. About frustration and programming and Python and operatingn systems and the Internet, about systematic thinking and management and procrastination and friendship and creativity and writing. But seriously; all of the above. This has been a light every day, an anchor, a reminder about pretty much all the things, even the non-obvious things, that I love about my life. Pretty much the best job I can imagine for the time, even if not forever. (I'm not that into "forever.") It has been immensely frustrating and tiring and stressful, and worth every moment of twelve-hour grading sessions and mornings that felt much too early and falling asleep on windowsills. Worth it, for every smile on someone's face when they understand something new, every acknowledging nod, every brave question as students come to my office hours and raise their hands in my section and tell me, and people around them, that there's something they don't know, but they want to know, and everything I've learned about and laughed about with the people working alongside me, who have been reliably incredible.</p>

<p>That never gets less amazing. I've in some capacity or other been a teacher for, now, almost 300 students and I remember most of them (maybe all? The uncertainty is because I haven't gone through to prove it and I'm not sure I have the access to), and every one of them has taught me something, probably, even the people I barely met in person (in someone else's section, non-attending engineers taking an easy class...). It sounds exaggerated, ridiculous, but I'm not really sure that it is. There are so many flavors of worry and bravery, so many different flashes of younger versions of me I see in other people and attitudes toward a class, or the world, that I'm not sure I understand. Every week I have to remember, and am thrilled to remember: I probably don't know your life, or what it's like, and it is not my job to make those judgments. It is my job to convey information and try to make it accessible and clear. It is my job to be your advocate in this space, and that is enough to quell frustration and most exhaustion both.</p>

<p>It is so much to be the person things are told to. I remember professors' and GSIs' reactions to end-of-semester panic and assignment-turn-ins more than many things that blurred together in my four years of college as a student, and to be the source of that is incredible to me. I see people do this irresponsibly. I promise, and am proud to be able to promise, that I will do my best to never do that, even if I am not a student in a formal school environment anymore. I will not make fun of you such that it's mean. You are forced to trust us teachers with things -- that's a big deal, and I respect that, so much. And on this side of the metaphorical curtain, to have gotten to share all this with other people sharing this role, or set of roles, with me, and talk about it to make us all better at it -- holy crap, basically.</p>

<p>I sat down in office hours this past semester and told the story of coming home from my first programming class mid-semester, feeling entirely useless. "I can't do this, I think," they tell me. I said, you know what? I'm getting hired as a software engineer. And I came from that. I see you. You can do this, too, if you want to, and we are here to help. It was true. I was right. I love being right! (Sometimes.)</p>

<p>I walk down the halls of my department building. Everyone in that class I wrote about in 2012 who was not a freshman at the time, or who was graduating early, is already done with college. One of those kids is a classmate of my fellow GSI in Winter 2014; she'll graduate from grad school this week just like me (with less time off between, presumably), and I'm sure she's not the only one. One of the freshmen, to whom I obliquely referred in that post three years ago, stops me in the hall more than once. "Hey, Jackie! How's it going?" A year ago, he tells me he's building rails apps. Now he's selling his stuff so he can leave town. I clap very loudly for him at graduation.</p>

<p>I got to work with former students. They teach me more about how to look at the world and new ways of thinking about grade organization and understanding concepts and music and just being a person.</p>

<p>This job and what I love about it led me to my next one.</p>

<p>It's like <a href="http://xkcd.com/353/">flying</a>. The Python helps, for sure, but it's not everything.</p>

<p>I am so proud of being part of communities which try to be iteratively better. Consistently more welcoming. The <a href="http://recurse.com/about">Recurse Center</a> is one. <a href="http://commoncycle.org/">Common Cycle</a> is another, a place where it's become clear I am one instigator of change but so far from the only one, a place where I am listened to without shouting (more on this another time, probably elsewhere), a place that helps people in ways I care about. A place that is about learning and teaching as totally integrated processes. I am so proud of that. This class has been another, and I look forward to all of them I'm already part of and will keep stepping into in the future. What can we do better? What do we know? Would this be interesting? Who does this serve? Why, why, why, and also how? This stuff is <a href="https://www.youtube.com/watch?v=2aqpF-MwyUs">always sappy</a>, I know, but I have to say I don't care -- at least, I don't mind. There aren't a lot of things I am willing to speak publically about like this, but this matters too much.</p>

<p>"I guess I'll see," I said. I was wrong about not getting to iterate on my experience. I got to see! How cool is that!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Globes and maps]]></title>
    <link href="http://aerenchyma.github.io/blog/2013/07/25/globes-and-maps/"/>
    <updated>2013-07-25T17:07:00-04:00</updated>
    <id>http://aerenchyma.github.io/blog/2013/07/25/globes-and-maps</id>
    <content type="html"><![CDATA[<p><a href="http://bit.ly/18Akcfu">Writes Bonnie Bogle of MapBox</a>,  "The diversity of our team has made our team stronger, our tools better, and our approaches smarter and more innovative."</p>

<p>The aim I see here is really great. This is what I'd like to see more of.</p>

<p>When industries, platforms, and organizations I care about acknowledge not just that they care about diversity, but that they can explain why they care and what they want to do, that they're serious for real reasons, I am pretty likely to talk about them positively, and excitedly, and often, to want to and try to use their products or services. I don't think I'm alone there.</p>

<p>I'm glad to see this for many reasons, obviously. But maps affect nearly everyone in some way or another. Maps have effects on everyone and how people deal with others. How they travel. What they think of places they frequent and places they've never been. I don't know this for sure, but I know it for me, and I see evidence of it everywhere. Maps help people form opinions on and gain knowledge about the public transit systems available (and unavailable!) to them. From maps arise issues of accessibility on multiple axes, a lot of frustration, metric tons of joy. (I love maps.) They help and hurt, but mostly, and certainly ideally, I believe they can and should and do help, and I think the world is moving closer, closer, to wholly positive maps all the time.</p>

<p>There's always a long way to go but maps help me figure that out.</p>

<p>So for now, yeah: this made me happy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Here at the edge]]></title>
    <link href="http://aerenchyma.github.io/blog/2013/05/25/here-at-the-edge/"/>
    <updated>2013-05-25T21:13:00-04:00</updated>
    <id>http://aerenchyma.github.io/blog/2013/05/25/here-at-the-edge</id>
    <content type="html"><![CDATA[<p><a href="http://www.powells.com/biblio/9780872863323"><em>Close to the Machine</em></a> was published in 1997, which was also the year I first (technically) got access to the Internet and eleven years before I seriously thought about programming myself.</p>

<p>I came across the memoir in 2013, after Ellen Ullman's op-ed <a href="http://nyti.ms/10UrtAc">How to Be a 'Woman Programmer'</a> was published in the New York Times on May 18.</p>

<!-- more -->


<p>The second line of that op-ed reads <em>I wrote code that ran at the levels between flashy human interfaces and the deep cores of operating systems, like the role of altos in a chorus, who provide the structure without your taking much notice of their melodic lines</em>, and I was instantly fascinated. I am interested in all the things she mentions in that sentence, but altos-in-a-chorus-y scripts I recognize as the kind of programming that, so far at least, brings me the most joy. (It's a tough choice.)</p>

<p>This is for reasons Ullman talks about. Describing sitting at a table with clients for a "city-wide database for AIDS service providers," she writes about the disconnect between she herself, a senior programmer tasked with building this system, and the other people around the table: runners of clinics, doctors, dentists, hospice directors. <em>I was there at the edge,</em> she writes, <em>the interface of the system, in all its existence, to the people, in all their existence.</em><sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup></p>

<p>Right now, that's the most thrilling thing for me about <em>being a programmer</em>, and also the most frustrating. There is so much knowledge I learnt over years that I wish I could convey in a matter of minutes. But my ability to make something that I <em>know</em> makes someone's life easier, watch them use it, and make it better for their use, never gets old.</p>

<p>Still: I don't know others' jobs better than they do. Maybe <em>I</em> think a command-line script will solve a lot of problems but it won't help if the users-to-be are confused by "the command line." And maybe I'm <em>wrong.</em> <a href="https://medium.com/close-to-the-machine/8c2d491886fa">Diana Kimball wrote about arrogance and obsession</a>, and how arrogance can be a tool. This resonates with me. (Sometimes, I'm right.) But the same kind of obsession that makes me happy also scares me. I've walked away from conversations about problem-solving feeling like an ass. <em>I talked, asked questions, but I saw I was operating at a different speed from the people at the table,</em> Ullman writes.<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup> That's familiar. Sometimes I'm focusing on a detail that is important for the <em>database</em> but not the users. Sometimes I'm rushing ahead -- this platform, that language, yes yes yes... What?</p>

<p>Many of these tools to switch on are incredibly useful in programming but the opposite when explaining, and so walking the line between the technical and the non-technical (these are terms I hesitate to use) -- say, teaching programming, or working on tech systems for a multi-disciplinary organization -- means careful attention is important. What are my assumptions (today)?</p>

<p>Ellen Ullman gives voice to a lot of the things that scare me, and a lot of the things that I find incredibly exciting. <em>In . . . software engineering, there is something almost shameful in this helpful, social-services system we're building. The whole project smacks of . . . people who just want to use the stuff we write and don't care how we did it.</em><sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup> I think that I understand what this says, but I don't feel good about understanding it. Yet also, I love that I kind of get it. <em>We had started with some scratchings on a white-board and built this: this operational program, this functional thing.</em><sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup> That realization, that's <em>amazing.</em> Every time.</p>

<p>I finished <em>Close to the Machine</em> a couple days ago -- a quick read, and one I enjoyed -- and I'm still thinking about it because of precisely this problem. Computer Science often revolves around complexity, but complexity is definitely not unique to it. I talk to my friend, a manager at a non-profit organization, about how a script could speed up tasks. Together, we write something that brings one process from months to days long, but just because programming can speed things up does not mean there isn't always more.</p>

<p>Programming is an <em>awesome</em> tool and also an awesome, awesome practice. But while I believe there is an huge amount of value in all stripes of Computer Science and programming as disciplines -- and do I ever, especially when it's approached the way <a href="http://bit.ly/ZlCrEw">it is at Hacker School</a> -- I also think programming's value depends a great deal on domain expertise. Its use as an awesome tool depends often on the experiences of hospice directors and doctors and runners of clinics. The knowledge of economists, and leaders of campaigns against hunger, and linguists doing fieldwork. Its value is, in my opinion, multiplied exponentially by experience -- not just experience programming, but experience of how an medical clinic worker goes about their day, for instance.</p>

<p>The value of programming depends on willingness to listen. Listening to other programmers is important, but also keeping one foot out of <em>the universe where two human beings can simultaneously understand the statement 'if space is numeric!'</em> matters, sometimes.<sup id='fnref:5'><a href='#fn:5' rel='footnote'>5</a></sup> And yet often the best work is done when absorbed in that universe. These facts coexist, and Ullman's work is one of the first (non-tweet) things I've read that acknowledges this.<sup id='fnref:6'><a href='#fn:6' rel='footnote'>6</a></sup></p>

<p>I liked spending hours in a beige classroom scribbling logic on a chalkboard with other people -- as Ullman puts it, <em>other weird logic-dreamers like myself.</em> It's something I love about programming, and something I loved about <a href="http://www.hackerschool.com/about">Hacker School</a>: there's always more. There's certainly happiness in belonging to a group of people who love something, but there's a danger in homogenizing that love in your head. Because it makes it very easy, then, to keep people <em>out</em> instead of bringing people in. There are infinite kinds of experience, and equally many ways to love something.</p>

<p>If everyone were "a programmer" first, little to nothing would ever get done outside that numeric space universe.</p>

<p>But if more people were "a programmer" by varied definitions, or offered the opportunity to be if they want -- the opportunity to truthfully say 'I've read a line or more of code'? 'I've written a short program'? 'I understand possibilities this tool could offer me'? 'I am committed to making sure a new system works for the people who will need to <em>use</em> it'? 'I will talk to people in technological domains about the complexity <em>I</em> am faced with and hope we can reach common ground', or something else -- then, I think more <em>would</em>. I've seen firsthand that it's useful and interesting to hear about types of complexity I'm unfamiliar with. It isn't because I am a programmer. And this: <em>We build the system, we live in its midst, and we are changed.</em><sup id='fnref:7'><a href='#fn:7' rel='footnote'>7</a></sup> That's certainly not unique to programmers, but I think it's <em>common</em> to them.</p>

<p>That's pretty cool.</p>

<hr />

<p><div class="footnotes">
	<ol>
		<li id='fn:1'><p> Ullman, Ellen. <u>Close to the Machine</u>. Picador: USA. 1997; 2012 reprint. p 12.
<a href='#fnref:1' rev='footnote'>↩</a></p>
</li><li id='fn:2'><p> <em>Ibid.</em>
<a href='#fnref:2' rev='footnote'>↩</a></p>
</li><li id='fn:3'><p> <em>Ibid,</em> p 9.
<a href='#fnref:3' rev='footnote'>↩</a></p>
</li><li id='fn:4'><p> <em>Ibid,</em> p 173.
<a href='#fnref:4' rev='footnote'>↩</a></p>
</li><li id='fn:5'><p> <em>Ibid,</em> p 2.
<a href='#fnref:5' rev='footnote'>↩</a></p>
</li><li id='fn:6'><p> I'm sure there are others/similar and welcome recommendations
<a href='#fnref:6' rev='footnote'>↩</a></p>
</li><li id='fn:7'><p> <em>Ibid,</em> p 30.
<a href='#fnref:7' rev='footnote'>↩</a></p>
</li>
	</ol>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Things worthwhile]]></title>
    <link href="http://aerenchyma.github.io/blog/2013/04/29/things-worthwhile/"/>
    <updated>2013-04-29T23:55:00-04:00</updated>
    <id>http://aerenchyma.github.io/blog/2013/04/29/things-worthwhile</id>
    <content type="html"><![CDATA[<p>In between projects, or at least time for documentation of them here (my very own Raspberry Pi arrived the other day! But I must acquire other hardware to do the project(s) I want first. I've been shoving new front-end-dev-y information into my head rapidly for a work project over the past week or so!) --</p>

<p><a href="http://geekfeminism.org/author/brainwane/">Sumana Harihareswara</a> posted <a href="http://geekfeminism.org/?p=7554">this</a>, "From 'Sit Still' to 'Scratch your own itch'" on <a href="http://geekfeminism.org">GeekFeminism.org</a> recently, and I wish to share it all over because I think it's wonderful.</p>

<p>I commented, but I'm echoing a slightly edited version of that comment here, with context included.</p>

<!-- more -->


<p>She lists some ideas and things to remember about "alternative pathways" to learning, and to getting into open stuff. There's an unspoken (and sometimes spoken) belief in large swathes of the open source world -- well-meaning, almost always! -- that not only is a good way of getting into programming (or really learning anything, especially anything that involves <em>making</em> ) to "scratch your own itch," but that this is the ideal way, the real way, the way that makes you legit, whatever that means.</p>

<p>Well, no.</p>

<p>I think this is a massively useful reminder. It's something I struggle with: 'but I want to make something <em>new.</em>' I know what it's like to get slowed down by trying to make something more generalizable.</p>

<p>I also think there are increasingly large sections of the internet and the world replete with great resources for new programmers or people who want to learn to program, or learn about programming, or learn about building stuff with circuits, or learn about automating putting a butterfly on every piece of clothing they own (a real, and seriously cool example, but that's another story). But there's a piece brought up in her piece I've linked that is often forgotten: all the practicing has value, and making something is <em>cool.</em></p>

<p>Sumana writes, <em>It is fine to simply piggyback on existing projects and drift around a bit learning lots of little things that way</em> -- more people should hear this. She writes, <em>Embrace boringness</em>  and explains that <em>If an idea appeals to you but there’s an inner censor saying “that’s too boring” or “what’s the use,” you can tell that inner voice that Sumana says “shut up.”</em></p>

<p>I deeply appreciate this, especially in the context of the popular Django tutorials, to be honest. I get frustrated making things I know have been made before if I don't have an idea to improve it, to make it mine. I tell other people, but seem to have a hypocritically difficult time learning myself, that sometimes doing one version without variation is a valuable way to learn and make an altered version better, let alone make me a better programmer. Yes, there are lots of blogging systems out there, and if you make a blog where you can post things, or edit things, or delete things or none or some of the above, even if you don't want to use it, it is an <em>unqualified awesome</em> that you made it. It's valuable time spent if you wanted to learn stuff, to make something, and it can make you better at more than just building a blog later if you want it to but these aren't the reasons to do it for me. <em>You made that</em> and learned stuff and it was neat, that's enough.</p>

<p>That's not a condescending head-pat sort of comment. When I say "that's COOL" I mean it, and not believing it for myself (indeed not believing it for anyone) is ridiculous. Time on the ground is valuable -- probably the most valuable thing if <em>being a great programmer</em> is a goal, and <em>this</em> is generalizable.</p>

<p>(I learn things from <a href="http://hackerschool.com">Hacker School</a> even nearly a year after I flew to New York for it.)</p>

<p>Anyway, I recommend it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[the # sign]]></title>
    <link href="http://aerenchyma.github.io/blog/2013/04/17/the-number-sign/"/>
    <updated>2013-04-17T22:40:00-04:00</updated>
    <id>http://aerenchyma.github.io/blog/2013/04/17/the-number-sign</id>
    <content type="html"><![CDATA[<p>Today, I went back to my old high school to help a friend teach middle schoolers an introductory workshop on Python and Raspberry Pi. It was thoroughly awesome, but amidst the awesome -- which I'm not going to talk about in detail yet -- I noticed something interesting:</p>

<p>Discussing comments in Python, someone in the room who graduated college several years before I did called '#', without hesitation, <em>the pound sign.</em></p>

<p>I debated (I was the one who introduced the comment syntax first), and settled on <em>hashtag</em> because I was honestly not sure if the kids would know what "pound" meant in this scenario. It is "pound" to me, but I <em>thought</em> to hesitate -- it wasn't a realization that came from looks of confusion. <em>Hashtag</em> seemed like the most accessible to 12-year-olds (n.b. in a very privileged place).</p>

<p>I got teased about this. By my friend and fellow teacher, not by the kids. He asks, "When we say 'hashtag', is that how you'd refer to this symbol?" They nodded yes. He laughed, and I did too; he, and I, and these kids, aren't even separated by a "generation" (I don't believe in this as a static term, as several people have written about recently, but as a placeholder...). Although they are half my age or less for the most part, honestly.</p>

<p>And entertainingly, none of us thought of calling it the <em>number</em> sign.</p>

<p>I laughed about this again because when you type it as the title of a post in an Octopress <code>rake new_post</code> command, it's automatically converted to <code>the-number-sign</code>, as you can see in this post URL.</p>

<p>Vocabulary is interesting.</p>

<p>(Other things that are interesting: e-textiles, libraries as makerspaces, and the exciting trends in grade school education! and open badging! and the work being done around me all the time!)</p>

<p>Teaching kids how they can make stuff they want to make is <em>great.</em></p>
]]></content>
  </entry>
  
</feed>
